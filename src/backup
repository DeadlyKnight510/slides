#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "iostream"
#include <string>
#include <cmath>
#include <vector>
using namespace cv;
using namespace std;

String sponsors[] = {"Senix-logo.png","ashcroft.png","impulse.png","intel.png","ptsa.png","rugged.png","teco.png", "Danville.png","pni.png","pointgrey.png","rotary.png","sexton-logo.png","teledynebenthos.png","theia.png","truevalue.png","videoray.png", "inverse.png", "pleasantontool.png", "3daccess.png","NIOfficialLogo.png","analogdevices1.png","andreesenhororwitz.png", "atomikrc.png","datron.png", "ebay.png", "google.png","subconn.png","svcf.png","tanius-logo-web.png"};
int level[] ={1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4};

Mat slide(Mat first, Mat second, int x)
{
	Mat between(400,800,CV_8UC3,Scalar(255,255,255));

	for(int o=799; o >= x; o--)
	{
		first.col(o).copyTo(between.col(o-x));
	}
	if(x!=0)
	{
		for(int e=0; e <x; e++)
		{
			second.col(e).copyTo(between.col(between.cols-x+e));
		}
	}

	return between;	
}
Mat changeSize(Mat src, int width, int height)
{
	Mat output (height+40,width+40,CV_8UC3, Scalar(255,255,255));

	float rows = src.rows;
	float cols = src.cols;
	float scale = 1;
	int newX,newY;

	cout << rows << " " << cols <<endl;

	if(cols/rows>width/height)
	{
		scale = width/cols;
		newX = cols * scale;
		newY = rows * scale;

		resize(src, src, cvSize(newX,newY));
		src.copyTo(output( cv::Rect(20, (360-src.rows)/2+20, src.cols, src.rows)));
	}
	else
	{
		scale = height/rows;
		newX = cols * scale;
		newY = rows * scale;

		resize(src, src, cvSize(newX,newY));
		src.copyTo(output( cv::Rect((760-src.cols)/2+20, 20, src.cols, src.rows)));
	}

	return output;
}

int main( int argc, char** argv )
{
	Mat src, nextSrc, output, nextOutput;
	int width = 760;
	int height = 360;

	Mat bronze = imread("img/bronze.png", CV_LOAD_IMAGE_COLOR); 
	Mat silver = imread("img/silver.png", CV_LOAD_IMAGE_COLOR); 
	Mat gold = imread("img/gold.png", CV_LOAD_IMAGE_COLOR); 
	Mat platinum = imread("img/platinum.png", CV_LOAD_IMAGE_COLOR); 
	
// 	resize(bronze, bronze, 

	String folderpath;
	vector<String> filenames;
	while(true)
	{
		for(int f=0; f<4; f++)
		{
			switch(f) {
				case 0: folderpath = "img/platinum/*.png"; break;
				case 1: folderpath = "img/gold/*.png"; break;
				case 2: folderpath = "img/silver/*.png"; break;
				case 3: folderpath = "img/bronze/*.png"; break;
			}
			cv::glob(folderpath, filenames);

			for (size_t i=0; i<filenames.size(); i++)
			{
				src = imread(filenames[i]);
				cout << filenames[i] <<endl;
				if((i+1)==filenames.size())
				{
					switch(f) {
						case 0: folderpath = "img/gold/*.png"; break;
						case 1: folderpath = "img/silver/*.png"; break;
						case 2: folderpath = "img/bronze/*.png"; break;
						case 3: folderpath = "img/platinum/*.png"; break;
					}
					cv::glob(folderpath, filenames);

					nextSrc = imread(filenames[0]);
				}
				else
				{
					nextSrc = imread(filenames[i+1]);
				}

				output = changeSize(src, width, height);
				nextOutput = changeSize(nextSrc, width, height);

				namedWindow("Sponsors!",0);
				imshow( "Sponsors!", output );
				waitKey(5000);

				for(int k=0; k <= 800; k=k+k*(801-k)*0.00005+1)
				{
					namedWindow("Sponsors!",0);
					imshow( "Sponsors!", slide(output, nextOutput, k));
					waitKey(1);	
				}
			}
		}
	}
	return(0);
}
